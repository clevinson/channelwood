<script type="text/paperscript" canvas="back-sketch">
	// Code ported to Paper.js from http://the389.com/9/1/
	// with permission.

	var Tri = Base.extend({
  initialize: function(x, y, dd, i, j) {
    this.position = new Point(x, y);
    this.radius = unit;
    this.rotation = dd;
    this.alive = false;
    this.draw();
  },
  draw: function() {
    this.shape = new Path.RegularPolygon({
      center: this.position,
      sides: 3,
      radius: this.radius,
      rotation: this.rotation,
      strokeColor: 'white',
      fillColor: 'white'
    });
  },
  check: function() {
    if (this.alive) {
      this.shape.fillColor = 'black';
      this.shape.strokeColor = 'black';
    } else {
      this.shape.fillColor = 'white';
      this.shape.strokeColor = 'white';
    }
  }
});
var unit = 45;
var radiusToWidth = 1.73205/2;
var radiusToHeight = 1.5;
var triangles = [];
var xtriangles = Math.ceil(view.size.width/(unit*radiusToWidth))+2;
var ytriangles = Math.ceil(view.size.height/(unit*radiusToHeight))+1;
function buildGrid (xCount, yCount, gridUnit) {
  for (var j = 0; j < yCount; j++) {
    for (var i = 0; i < xCount; i++) {
      triangles.push(new Tri((i-1)*gridUnit*radiusToWidth, j*gridUnit*radiusToHeight, i%2*180+j%2*180, i, j));
    }
  }
}
buildGrid(xtriangles, ytriangles, unit);

var rate = 3;
var time = 0;
function onFrame(event) {
  if (event.count % rate == 0) {
    time++;
    checkLife();
  }
}


var aliveTriangles = [];
checkLife();
function checkLife () {
  // reset old position to alive = false
  for (var i = 0; i < aliveTriangles.length; i++) {
    var currentTri = aliveTriangles[i][0] + aliveTriangles[i][1]*xtriangles;
    triangles[currentTri].alive = false;
    triangles[currentTri].check();
  }
  // calculate new position
  for (var i = 0; i < aliveTriangles.length; i++) {
    var x = aliveTriangles[0][0];
    var y = aliveTriangles[0][1];
    var xd = aliveTriangles[0][2];
    var yd = aliveTriangles[0][3];
    aliveTriangles.shift();
    aliveTriangles.push([x+xd, y+yd, xd, yd]);
    var newX = aliveTriangles[aliveTriangles.length-1][0];
    var newY = aliveTriangles[aliveTriangles.length-1][1];
    if (newY >= ytriangles-1 || newY <= 0) {
      aliveTriangles[aliveTriangles.length-1][3] *= -1;
    }
    if (newX >= xtriangles-1 || newX <= 0) {
      aliveTriangles[aliveTriangles.length-1][2] *= -1;
    }
  }
  // set alive = true
  for (var i = 0; i < aliveTriangles.length; i++) {
    var currentTri = aliveTriangles[i][0] + aliveTriangles[i][1]*xtriangles;
    triangles[currentTri].alive = true;
  }
  // check for overlapping position
  /*for (var i = aliveTriangles.length-1; i > 0; i--) {
    var currentTri = aliveTriangles[i][0] + aliveTriangles[i][1]*xtriangles;
    for (var m = 0; m < aliveTriangles.length; m++) {
      var newTri = aliveTriangles[m][0] + aliveTriangles[m][1]*xtriangles;
      if (i != m && aliveTriangles[m][0] == aliveTriangles[i][0] && aliveTriangles[m][1] == aliveTriangles[i][1]){
        triangles[currentTri].alive = false;
        triangles[newTri].alive = false;
        aliveTriangles.splice(i, 1);
        aliveTriangles.splice(m, 1);
      }
    }
  }*/
  // turn em on
  for (var i = 0; i < aliveTriangles.length; i++) {
    var currentTri = aliveTriangles[i][0] + aliveTriangles[i][1]*xtriangles;
    triangles[currentTri].check();
  }
}
function onMouseMove(event) {
  mousex = Math.ceil((event.point.x-unit*radiusToWidth/2)/(unit*radiusToWidth));
  mousey = Math.ceil((event.point.y-unit*radiusToHeight/2)/(unit*radiusToHeight))-1;
  var mx = mousex;
  var my = mousey;
  if (mx <= 0) mx = 0;
  if (mx >= xtriangles) mx = xtriangles-1;
  if (my <= 0) my = 0;
  if (my >= ytriangles) my = ytriangles-1;
  aliveTriangles.push([mx,my,1,1]);
}
function onMouseDown(event) {
  aliveTriangles = [];
}
</script>

<canvas id='back-sketch' resize style=""></canvas>

<style type="text/css">
	footer nav {
		background-color: transparent;
	}
</style>

<%= erb :footer %>
